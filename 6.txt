import math
import random
import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import quad

def absolute_relative_error(true_value, approx_value):
    absolute_error = abs(abs(true_value) - approx_value)
    relative_error = abs(absolute_error / true_value if true_value != 0 else 0)
    return absolute_error, relative_error

# Задание 1
def calculate_triangle_area(n):
    # 1. Построить график функции Определить размеры a и b прямоугольника, в котором целиком лежит фигура.
    def f1(x):
        result = np.where(x < n, 10 * x / n, 10 * (x - 20) / (n - 20))
        return result
    def f2(x):
        return x*0



    x = np.linspace(0, 20, 110)
    y1 = f1(x)
    y2= f2(x)


    # 2. Выбрать количество случайных точек N.
    N = 10000

    # 3. Сгенерировать N случайных точек в прямоугольнике a на b.
    a = max(x)
    b = max(f1(x))
    print(a)
    print(b)


    points_inside = 0

    for _ in range(N):
        x = random.uniform(0, a)
        y = random.uniform(0, b)


        # 4. Проверить условие  y < f(x) для каждой точки.
        if 0 <= x <= 20 and y < f1(x):
            points_inside += 1



    # 5. Вычислить приближенно площадь фигуры.
    area = (points_inside / N) * (a * b)
    area_true = abs( (a * b)/2)


    # Шаг 6: Оценка погрешности метода Монте-Карло
    abs_error, rel_error = absolute_relative_error(area_true, area)
    return area, area_true, points_inside, abs_error, rel_error



#Задание 2
def monte_carlo_integration(n):
    # Функция для интеграции
    def f(x, n):
        return math.sqrt(11 - n * math.sin(x)**2)

    # Используем метод Монте-Карло для приближенного вычисления интеграла

    # 2. Выбрать количество случайных точек N.
    N = 1000  # Количество случайных точек
    a = 0  # Нижний предел интегрирования
    b = 5  # Верхний предел интегрирования
    integral_sum = 0  # Сумма значений функции на точках

    # Построить график функции y = f(x).
    x = np.linspace(0, 5, 100)
    y = [f(val, n) for val in x]



    points_inside = 0

    for _ in range(N):
        elt = random.uniform(a, b)
        integral_sum += f(elt, n)

    integral = (b - a) * integral_sum / N




    ##
    for _ in range(N):
        x1 = random.uniform(0, 6)
        y1 = random.uniform(0, 6)


        # 4. Проверить условие y < f(x) для каждой точки.
        if 0 <= x1 <= 5 and y1 <= f(x1, n):
            points_inside += 1


        if 0 <= x1 <= 5 and 0 <= y1 <= min(y):
            points_inside += 1









    def integrand(x):
        return f(x, n)
    real_value, _ = quad(integrand, a, b)
    # Шаг 6: Оценка погрешности метода Монте-Карло
    abs_error, rel_error = absolute_relative_error(real_value, integral)
    return integral, real_value, points_inside, abs_error, rel_error


# Задание 3
def calculate_pi(n):
    def is_inside_circle(x, y, r):
        return x**2 + y**2 < r**2

    R = n
    N = 10000
    M = 0


    random_points = []
    for _ in range(N):
        x = random.uniform(-R, R)
        y = random.uniform(-R, R)
        random_points.append((x, y))

    # Определяем количество точек, попавших в круг
    for point in random_points:
        x, y = point
        if is_inside_circle(x, y, R):
            M += 1

    # 4. Построить окружность радиуса R, вписанную в квадрат [-R,R]x[-R,R]
    angle = np.linspace(0, 2 * np.pi, 100)
    x_circle = R * np.cos(angle)  # X-координаты точек на окружности
    y_circle = R * np.sin(angle)  # Y-координаты точек на окружности
    plt.figure(figsize=(6, 6))
    plt.plot(x_circle, y_circle, label='Окружность')
    plt.show()

    # Вычисляем приближенное значение числа Пи
    pi_approx = 4 * (M / N)

    # Оценка погрешности метода Монте-Карло
    abs_error = abs(math.pi - pi_approx)
    rel_error = abs_error / math.pi

    return pi_approx, M, abs_error, rel_error

# Задание 4
def calculate_polar_area(n):
    A = 11 + n
    B = 11 - n
    
    theta = np.linspace(0, 2*np.pi, 100)
    
    x = np.sqrt(A) * np.cos(theta)
    y = np.sqrt(B) * np.sin(theta)
    
    
    N = 1000
    
    a, b = np.sqrt(A), np.sqrt(B)
    
    r_x = np.random.uniform(-a, a, N)
    r_y = np.random.uniform(-b, b, N)
    
    phi = lambda x, y : np.arctan(y/x)
    rad = lambda x, y : np.sqrt(x ** 2 + y ** 2)
    p = lambda x, y : np.sqrt(A*np.cos(phi(x,y)) ** 2 + B*np.sin(phi(x,y)) ** 2)
    
    plt.figure(figsize=(8, 8))
    plt.plot(x, y, 'orange')
    plt.scatter(r_x, r_y)
    
    points =  np.array([(i, j) for i,j in zip(r_x, r_y) if rad(i,j) < p(i,j)])
    # xs,  ys = zip(*points)
    # plt.scatter(xs, ys)

    area_true = abs(math.pi * a * b) 

    
    S = a * b * 4    
    ans = S * len(points) / N
    

    # f = lambda x, y: x ** 2 + y ** 2 < r ** 2
    plt.title(f"Количество точек = {N}, Приближенный ответ = {ans:.2f}")
    abs_error = abs(area_true - ans)
    rel_error = abs_error / area_true if area_true != 0 else 0
    plt.show()
    return ans, area_true, len(points), abs_error, rel_error




n = 2


area1, area_true1, points_inside1, absolute_error1, relative_error1 = calculate_triangle_area(n)
print("Задание 1:")
print(f'Площадь приближённая: {area1:.2f}')
print(f'Площадь фигуры точная: {area_true1:.2f}')
print(f"Случайных точек внутри фигуры: {points_inside1}")
print(f"Абсолютная погрешность: {absolute_error1}")
print(f"Относительная погрешность: {relative_error1}")
print("\n")


integral2, area_true2, points_inside2, absolute_error2, relative_error2 = monte_carlo_integration(n)
print("Задание 2:")
print(f"Приближенное значение интеграла (Площадь фигуры): {integral2:.4f}")
print(f'Площадь фигуры найденная точным численным методом : {area_true2:.2f}')
print(f"Случайных точек внутри фигуры: {points_inside2}")
print(f"Абсолютная погрешность: {absolute_error2}")
print(f"Относительная погрешность: {relative_error2}")
print("\n")


pi_approx3, points_inside3, absolute_error3, relative_error3 = calculate_pi(n)
print("Задание 3:")
print(f"Приближенное значение числа Пи: {pi_approx3:.4f}")
print(f"Случайных точек внутри фигуры: {points_inside3}")
print(f"Абсолютная погрешность: {absolute_error3}")
print(f"Относительная погрешность: {relative_error3}")
print("\n")


area4, area_true4, points_inside4, absolute_error4, relative_error4 = calculate_polar_area(n)
print("Задание 4:")
print(f"Площадь фигуры: {area4:.2f}")
print(f'Площадь фигуры точная: {area_true4:.2f}')
print(f"Случайных точек внутри фигуры: {points_inside4}")
print(f"Абсолютная погрешность: {absolute_error4}")
print(f"Относительная погрешность: {relative_error4}")
print("\n")


